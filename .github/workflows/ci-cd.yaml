name: "CI / CD"

on:
  workflow_call:
    inputs:
      infra-repo:
        description: "Infrastructure repository"
        required: true
        type: "string"
      infra-repo-path:
        description: "Path to helm chart dir in infra repository"
        required: true
        type: "string"
      ci-runs-on:
        description: "The machine on which the CI will be run"
        required: false
        default: "ubuntu-22.04"
        type: "string"
      ci-test-service-account:
        description: "GCP Service account to use for CI tests"
        required: false
        type: "string"
      skip-ci-step:
        description: "Skip CI step"
        required: false
        default: false
        type: "boolean"
      skip-build-docker-image-step:
        description: "Skip the docker image build step"
        required: false
        default: false
        type: "boolean"
      docker-compose-service:
        description: "Docker compose service to use"
        required: false
        default: "jobs"
        type: "string"
    secrets:
      github-pat:
        description: "GitHub Personal Access Token"
        required: true

defaults:
  run:
    shell: "bash"

jobs:
  prepare:
    name: "Prepare"
    runs-on: "ubuntu-22.04"
    outputs:
      sha-short: "${{ steps.set-variables.outputs.sha-short }}"
      get-config: "${{ steps.should-get-config.outputs.get-config }}"
      perform-tests: "${{ steps.should-perform-tests.outputs.perform-tests }}"
      perform-lint: "${{ steps.should-perform-lint.outputs.perform-lint }}"
      docker-registry: "${{ steps.get-docker-vars.outputs.docker-registry }}"
      docker-image-name: "${{ steps.get-docker-vars.outputs.docker-image-name }}"
      docker-tag: "${{ steps.set-variables.outputs.docker-tag }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Should get config"
        id: "should-get-config"
        run: |
          if [ -f ./bin/ci/get_config.sh ]; then
            GET_CONFIG=1
          else
            GET_CONFIG=0
          fi
          echo "::set-output name=get-config::${GET_CONFIG}"

      - name: "Should perform tests"
        id: "should-perform-tests"
        run: |
          if [ -f ./bin/ci/test.sh ]; then
            TEST=1
          else
            TEST=0
          fi
          echo "::set-output name=perform-tests::${TEST}"
          if [ ${TEST} == 0 ]; then
            echo "::warning::No test script has been defined in this repository"
          fi

      - name: "Should perform lint"
        id: "should-perform-lint"
        run: |
          if [ -f ./bin/ci/lint.sh ]; then
            LINT=1
          else
            LINT=0
          fi
          echo "::set-output name=perform-lint::${LINT}"
          if [ ${LINT} == 0 ]; then
            echo "::warning::No lint script has been defined in this repository"
          fi

      - name: "Get docker image name and registry"
        id: "get-docker-vars"
        run: |
          DOCKER_IMAGE_NAME=$(yq -e '.services.${{ inputs.docker-compose-service }}.image | split(":").0' docker-compose.yaml)
          echo "::set-output name=docker-image-name::$DOCKER_IMAGE_NAME"

          DOCKER_REGISTRY=$(yq -e '.services.${{ inputs.docker-compose-service }}.image | split("/").0' docker-compose.yaml)
          echo "::set-output name=docker-registry::$DOCKER_REGISTRY"

      - name: "Set variables"
        id: "set-variables"
        uses: "actions/github-script@v6"
        with:
          script: |
            const shaShort = context.sha.substring(0, 7);

            const dockerTag = (()=> {
              if (!/^refs\/heads\//.test(context.ref)) {
                return "sha-" + shaShort;
              } else {
                const sanitizedBranch = context.ref.replace(/^refs\/heads\//g, '').replace(/[^a-zA-Z0-9._-]+/g, '-');
                const shaSuffix = "-sha-" + shaShort;
                return sanitizedBranch.substring(0, 128 - shaSuffix.length) + shaSuffix;
              }
            })();

            core.setOutput("sha-short", shaShort);
            core.setOutput("docker-tag", dockerTag);

  ci:
    name: "CI"
    runs-on: "${{ inputs.ci-runs-on }}"
    needs: ["prepare"]
    if: >
      !inputs.skip-ci-step
      && (needs.prepare.outputs.perform-tests == 1
        || needs.prepare.outputs.perform-lint == 1)

    env:
      DOCKER_TAG: "dev-${{ needs.prepare.outputs.sha-short }}"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set dev docker image metadata"
        id: "docker-metadata"
        uses: "docker/metadata-action@v4"
        with:
          images: |
            ${{ needs.prepare.outputs.docker-image-name }}
          tags: |
            type=raw,value=${{ env.DOCKER_TAG }}

      # workaround for: https://github.com/actions-runner-controller/actions-runner-controller/issues/893
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"
        with:
          endpoint: builders

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"
          create_credentials_file: true

      - name: "Login to Docker Registry"
        id: "docker-login"
        uses: "docker/login-action@v2"
        with:
          registry: "${{ needs.prepare.outputs.docker-registry }}"
          username: "oauth2accesstoken"
          password: "${{ steps.gcp-auth.outputs.access_token }}"

      - name: "Add uid and gid env vars"
        id: "set-uid-gid"
        run: |
          echo "::set-output name=uid::`id -u`"
          echo "::set-output name=gid::`id -g`"

      - name: "Build Docker image"
        id: build-docker-image
        uses: "docker/build-push-action@v3"
        with:
          target: "dev"
          build-args: |
            UID=${{ steps.set-uid-gid.outputs.uid }}
            GID=${{ steps.set-uid-gid.outputs.gid }}
          push: false
          load: true
          tags: "${{ steps.docker-metadata.outputs.tags }}"
          labels: "${{ steps.docker-metadata.outputs.labels }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Lint"
        run: |
          ./bin/ci/lint.sh
        if: needs.prepare.outputs.perform-lint == 1

      - name: "Get config"
        id: "get-config"
        run: |
          ./bin/ci/get_config.sh
        if: >
          needs.prepare.outputs.perform-tests == 1
          && needs.prepare.outputs.get-config == 1
          && (success()
            || (failure()
              && steps.build-docker-image.conclusion == 'success'))

      - name: "Authenticate to Google Cloud with test Service Account"
        id: "gcp-auth-test-sa"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "${{ inputs.test-service-account }}"
          create_credentials_file: true
        if: >
          inputs.test-service-account
          && (success()
              || (failure()
              && steps.get-config.conclusion == 'success'))

      - name: "Test"
        run: |
          ./bin/ci/test.sh
        if: >
          needs.prepare.outputs.perform-tests == 1
          && (success()
            || (failure()
              && steps.build-docker-image.conclusion == 'success'))

      - name: "Cleanup"
        id: "cleanup"
        run: |
          docker compose down --remove-orphans
        if: always()

  build-docker-image:
    name: "Build docker image"
    runs-on: "ubuntu-latest"
    needs: ["prepare", "ci"]
    if: >
      always()
      && !inputs.skip-build-docker-image-step
      && needs.prepare.result == 'success'
      && contains('success skipped', needs.ci.result)
      && contains('refs/heads/master refs/heads/main', github.ref)

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set docker prod image metadata"
        id: "docker-metadata"
        uses: "docker/metadata-action@v4"
        with:
          images: |
            ${{ needs.prepare.outputs.docker-image-name }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ needs.prepare.outputs.docker-tag }}
            type=sha

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"
          create_credentials_file: false

      - name: "Login to Docker Registry"
        uses: "docker/login-action@v2"
        with:
          registry: "${{ needs.prepare.outputs.docker-registry }}"
          username: "oauth2accesstoken"
          password: "${{ steps.gcp-auth.outputs.access_token }}"

      - name: "Add uid and gid env vars"
        id: "set-uid-gid"
        run: |
          echo "::set-output name=uid::`id -u`"
          echo "::set-output name=gid::`id -g`"

      - name: "Build Docker image"
        uses: "docker/build-push-action@v3"
        with:
          target: "prod"
          build-args: |
            UID=${{ steps.set-uid-gid.outputs.uid }}
            GID=${{ steps.set-uid-gid.outputs.gid }}
            VERSION=${{ needs.prepare.outputs.sha-short }}
          push: true
          tags: "${{ steps.docker-metadata.outputs.tags }}"
          labels: "${{ steps.docker-metadata.outputs.labels }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  sync-jobs:
    name: "Sync job configurations with the infra repository"
    runs-on: "ubuntu-latest"
    needs: ["prepare", "build-docker-image"]
    if: >
      always()
      && contains('success skipped', needs.build-docker-image.result)
      && contains('refs/heads/master refs/heads/main', github.ref)

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          path: "jobs"

      - name: "Checkout infra repo"
        uses: "actions/checkout@v3"
        with:
          repository: "${{ github.repository_owner }}/${{ inputs.infra-repo }}"
          ref: "master"
          token: "${{ secrets.github-pat }}"
          path: "infra"

      - name: "Merge job configs"
        uses: "rtbhouse-apps/github-workflows-jobs/actions/merge-job-configs@v0"
        with:
          job-configs-glob-path: "**/job?(s).yaml"
          target-chart-path: "infra/${{ inputs.infra-repo-path }}"

      - name: "Commit and push chages"
        run: |
          cd infra/
          git status
          if git diff --quiet --exit-code; then
            echo "::notice::Nothing to commit"
          else
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add ${{ inputs.infra-repo-path }}/values.yaml
            git commit -m "ops: sync job configs (app code ref: ${{ needs.prepare.outputs.sha-short }})"
            git push
          fi


